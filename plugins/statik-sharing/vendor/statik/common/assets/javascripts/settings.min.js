"use strict";function _slicedToArray(e,t){return _arrayWithHoles(e)||_iterableToArrayLimit(e,t)||_unsupportedIterableToArray(e,t)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(e,t){if(e){if("string"==typeof e)return _arrayLikeToArray(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Map"===(r="Object"===r&&e.constructor?e.constructor.name:r)||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?_arrayLikeToArray(e,t):void 0}}function _arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function _iterableToArrayLimit(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var r=[],n=!0,a=!1,i=void 0;try{for(var o,s=e[Symbol.iterator]();!(n=(o=s.next()).done)&&(r.push(o.value),!t||r.length!==t);n=!0);}catch(e){a=!0,i=e}finally{try{n||null==s.return||s.return()}finally{if(a)throw i}}return r}}function _arrayWithHoles(e){if(Array.isArray(e))return e}function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}!function(p){!1!==window.hasOwnProperty("statik_common_config")&&(window.statikApi=window.statikApi||{},statikApi.commons={config:window.statik_common_config,debug:parseInt(window.statik_common_config.debug),$wrapper:p(document).find("#statik"),$multipleSelects:p(document).find("#statik select[data-multiple]"),$repeaters:p(document).find("#statik .js-repeater-wrapper"),handleAsyncSelectsFields:function(){statikApi.commons.$wrapper.find("select[data-async]").each(function(e,t){var r=p(t),n=r.data("current-value"),a=r.parent();p.ajax({url:statikApi.commons.config.api.base+"config/async-select/"+r.data("async"),method:"GET",beforeSend:function(e){a.addClass("loading"),e.setRequestHeader("X-WP-Nonce",statikApi.commons.config.nonce)},error:function(e){statikApi.commons.debug&&console.log(e)},success:function(e){"object"===_typeof(e)&&e.forEach(function(e){e.value===n&&(e.selected=!0),r.append(p("<option>",e))}),r.attr("data-disabled")||r.removeAttr("disabled")},complete:function(){a.removeClass("loading")}})})},handleMultipleSelects:function(){0!==statikApi.commons.$multipleSelects.length&&(p("<link/>",{rel:"stylesheet",type:"text/css",href:statikApi.commons.config.assetsUrl+"/stylesheets/vendors/selectize-0.12.6.min.css"}).appendTo("head"),p.getScript(statikApi.commons.config.assetsUrl+"/javascripts/vendors/jquery-ui-1.12.1.min.js",function(){p.getScript(statikApi.commons.config.assetsUrl+"/javascripts/vendors/selectize-0.12.6.min.js",function(){statikApi.commons.$multipleSelects.each(function(e,t){var r=p(t).data("validation");p(t).selectize({plugins:["remove_button","drag_drop"],delimiter:",",persist:!1,mode:"multi",create:function(e){return!("string"==typeof r&&!RegExp(r).test(e))&&{value:e,text:e}}})})})}))},handleRepeaters:function(){0!==statikApi.commons.$repeaters.length&&(statikApi.commons.$repeaters.on("click",".js-add-row",function(e){e.preventDefault();var t=p(e.currentTarget).closest(".js-repeater-wrapper"),e=t.find(".js-fields-wrapper .js-repeater-row:last-of-type").data("key")||0;t.find(".js-fields-wrapper").append(t.find(".js-template").html().replace(/data-name/g,"name").replace(/data-required/g,"required").replace(/template-key/g,e+1))}),statikApi.commons.$repeaters.on("click",".js-remove-row",function(e){e.preventDefault(),p(e.currentTarget).closest(".js-repeater-row").remove()}))},handleSettingsSelect:function(){statikApi.commons.$wrapper.on("change","#nav-select",function(e){window.location.href=e.currentTarget.value})},handleConditionsFieldset:function(){function e(){var e=statikApi.commons.$wrapper.find(".statik-grid-row[data-conditions]"),l=statikApi.commons.$wrapper.find(".statik-generator[data-namespace]").data("namespace");e.each(function(e,t){for(var r=p(t),t=r.data("conditions"),n=!0,a=0,i=Object.entries(t);a<i.length;a++){var o=_slicedToArray(i[a],2),s=o[0],c=o[1],o=void 0,o="!"===s.substring(s.length-1)&&(s=s.substring(0,s.length-1),!0),s=statikApi.commons.$wrapper.find('[name="'.concat(l,"[").concat(s,']"]'));s.length&&(n=o?s.val()!==c:s.val()===c)}n?(r.css("display","grid"),r.find("input[data-required], select[data-required], textarea[data-required]").attr("required",!0)):(r.css("display","none"),r.find("input[data-required], select[data-required], textarea[data-required]").removeAttr("required"))})}statikApi.commons.$wrapper.find("input[required], select[required], textarea[required]").attr("data-required",!0),statikApi.commons.$wrapper.on("change","form",e),e()}},statikApi.commons.handleAsyncSelectsFields(),statikApi.commons.handleMultipleSelects(),statikApi.commons.handleRepeaters(),statikApi.commons.handleSettingsSelect(),statikApi.commons.handleConditionsFieldset())}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
