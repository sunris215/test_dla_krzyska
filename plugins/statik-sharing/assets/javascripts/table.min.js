"use strict";!function(l){window.statikApi=window.statikApi||{},statikApi.sharingLog={$logsWrapper:l(document).find("#statik_logs_page"),initializeClickActions:function(){statikApi.sharingLog.$logsWrapper.on("click",".js-collapse-trigger",function(t){statikApi.sharingLog.toggleCollapse(l(t.currentTarget).data("collapse"))})},toggleCollapse:function(t){null===t&&(t=statikApi.sharingLog.$logsWrapper.find(".logs-table tbody tr:first-of-type").data("collapse"));var s=l('[data-collapse="'+t+'"]'),i=s.find(".js-toggle-collapse");0!==s.length&&(s.is(".active")?i.slideUp(400,function(){return s.removeClass("active")}):(l(".active[data-collapse] .js-toggle-collapse").slideUp(),l("[data-collapse]").removeClass("active"),s.addClass("active"),i.slideDown(),s.prop("data-loaded")||s.is(":not(.active)")||statikApi.sharingLog.displayRowDataAjax(parseInt(s.find('[data-source-key="source_blog"]').text()),parseInt(s.find('[data-source-key="source_post"]').text()),parseInt(s.find('[data-source-key="dest_blog"]').text()),parseInt(s.find('[data-source-key="dest_post"]').text()),parseInt(s.find('[data-source-key="user_id"]').text())).then(function(t){var e=t.data;Object.keys(e||{}).map(function(t,a){i.find('[data-dest="'+t+'"]').html(e[t]),s.find('[data-source-key="'+t+'"]').html(e[t+"_short"]||e[t])}),s.prop("data-loaded",1)})))},displayRowDataAjax:function(t,s,i,o,n){return new Promise(function(a,e){l.ajax({url:window.ajaxurl,method:"get",data:{action:"sharing_logs_links",source_blog:t,source_post:s,dest_blog:i,dest_post:o,user_id:n},success:function(t){(!1!==t.success?a:e)(t)},error:function(t){return e(t)}})})}},statikApi.sharingLog.initializeClickActions(),statikApi.sharingLog.toggleCollapse(null)}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRhYmxlLm1pbi5qcyJdLCJuYW1lcyI6WyIkIiwid2luZG93Iiwic3RhdGlrQXBpIiwic2hhcmluZ0xvZyIsIiRsb2dzV3JhcHBlciIsImRvY3VtZW50IiwiZmluZCIsImluaXRpYWxpemVDbGlja0FjdGlvbnMiLCJvbiIsImV2ZW50IiwidG9nZ2xlQ29sbGFwc2UiLCJjdXJyZW50VGFyZ2V0IiwiZGF0YSIsImNvbGxhcHNlSWQiLCIkY29sbGFwc2VSb3dzIiwiJGNvbGxhcHNlQ29udGVudCIsImxlbmd0aCIsImlzIiwic2xpZGVVcCIsInJlbW92ZUNsYXNzIiwiYWRkQ2xhc3MiLCJwcm9wIiwiZGlzcGxheVJvd0RhdGFBamF4IiwicGFyc2VJbnQiLCJ0ZXh0IiwiT2JqZWN0Iiwia2V5cyIsImh0bWwiLCJ0aGVuIiwiX3JlZiIsIm1hcCIsImtleSIsImluZGV4Iiwic291cmNlQmxvZyIsInNvdXJjZVBvc3QiLCJkZXN0QmxvZyIsImRlc3RQb3N0IiwidXNlciIsImFjdGlvbiIsInJlc29sdmUiLCJyZWplY3QiLCJzb3VyY2VfYmxvZyIsInNvdXJjZV9wb3N0IiwiZGVzdF9ibG9nIiwiZGVzdF9wb3N0IiwidXNlcl9pZCIsInN1Y2Nlc3MiLCJyZXNwb25zZSIsImVycm9yIiwialF1ZXJ5Il0sIm1hcHBpbmdzIjoiY0FBQSxTQUFXQSxHQUNUQyxPQUFPQyxVQUFZRCxPQUFPQyxXQUFhLEdBRHhDQSxVQUFBQyxXQUFhLENBSWRDLGFBQUFKLEVBQUFLLFVBQUFDLEtBQUEscUJBS0FDLHVCQUFBLFdBQ0FMLFVBQUFDLFdBQUFDLGFBQUFJLEdBQUEsUUFBQSx1QkFBQSxTQUFBQyxHQUNJRixVQUFBQSxXQUF3QkcsZUFBQVYsRUFBQVMsRUFBQUUsZUFBTUMsS0FBQSxnQkFTbENGLGVBQUEsU0FBQUcsR0FDQSxPQUFBQSxJQUNJSCxFQUFnQlIsVUFBQUMsV0FBQUMsYUFDVlMsS0FBQUEsc0NBQ0ZBLEtBQUFBLGFBS0YsSUFBTUMsRUFBa0JkLEVBQUEsbUJBQXFCYSxFQUFhLE1BQ3BERSxFQUFtQkQsRUFBY1IsS0FBSyx1QkFFZixJQUF6QlEsRUFBY0UsU0FJZEYsRUFBY0csR0FBRyxXQUNuQkYsRUFBaUJHLFFBQVEsSUFBSyxXQUFBLE9BQUFKLEVBQUFLLFlBQUEsYUFFL0JuQixFQUFBLDhDQUFBa0IsVUFHRGxCLEVBQUUsbUJBQW1CbUIsWUFBWSxVQUFqQ25CLEVBQUVvQixTQUFtQkQsVUFFckJMLEVBQWNNLFlBR1ZOLEVBQWNPLEtBQUssZ0JBQWtCUCxFQUFjRyxHQUFHLGtCQUkxRGYsVUFBVUMsV0FBV21CLG1CQUFyQnBCLFNBQVVDLEVBQVdtQixLQUFBQSxtQ0FDSWhCLFFBS05pQixTQUFBVCxFQUFBUixLQUFBLG1DQUFBa0IsUUFDakJDLFNBQU9DLEVBQVBwQixLQUE0QixpQ0FBZ0JrQixRQUMxQ1QsU0FBQUEsRUFBQVQsS0FBc0IsaUNBQWtDTSxRQUN4REUsU0FBQUEsRUFBbUJSLEtBQUEsK0JBQW1DcUIsU0FDdkRDLEtBSEQsU0FBQUMsR0FBQSxJQUFBakIsRUFBQWlCLEVBQUFqQixLQUtBRSxPQUFBQSxLQUFBQSxHQUFtQixJQUFBZ0IsSUFBQSxTQUFBQyxFQUFlQyxHQVpwQ2pCLEVBQUFULEtBQUEsZUFBQXlCLEVBQUEsTUFBQUosS0FBQWYsRUFBQW1CLElBakRtQmpCLEVBQUFSLEtBQUEscUJBQUF5QixFQUFBLE1BQUFKLEtBQUFmLEVBQUFtQixFQUFBLFdBQUFuQixFQUFBbUIsTUFrRXpCakIsRUFBQU8sS0FBQSxjQUFBLFFBZVVULG1CQUFNLFNBQUFxQixFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxHQUNKQyxPQUFBQSxJQUFBQSxRQUFRLFNBQUFDLEVBQUFDLEdBQ1JDLEVBQUFBLEtBQUFBLENBQ0FDLElBQUFBLE9BQUFBLFFBQ0FDLE9BQUFBLE1BQ0FDLEtBQUFBLENBQ0FDLE9BQU8scUJBVEpKLFlBQUFSLEVBV0xhLFlBQVNaLEVBQ1BTLFVBQUlJLEVBQ0ZQLFVBQU9PLEVBRVBGLFFBQUFSLEdBSkpTLFFBQVMsU0FBQ0MsS0FPUixJQUFBUixFQUFRUSxRQW5CZFIsRUFDU0MsR0FEVE8sSUE3RUpDLE1BQUEsU0FBQUQsR0FBQSxPQUFBUCxFQUFBTyxVQXdHQTdDLFVBQVVDLFdBQVdJLHlCQUNyQkwsVUFBVUMsV0FBV08sZUFBZSxNQTNHdEMsQ0E0R0d1QyIsImZpbGUiOiJ0YWJsZS5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKCQpIHtcbiAgd2luZG93LnN0YXRpa0FwaSA9IHdpbmRvdy5zdGF0aWtBcGkgfHwge307XG4gIHN0YXRpa0FwaS5zaGFyaW5nTG9nID0ge1xuICAgIC8qKlxuICAgICAqIGpRdWVyeSBlbGVtZW50XG4gICAgICovXG4gICAgJGxvZ3NXcmFwcGVyOiAkKGRvY3VtZW50KS5maW5kKCcjc3RhdGlrX2xvZ3NfcGFnZScpLFxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZSBjbGljayBhY3Rpb24gaW4gU2hhcmluZyB0YWJsZS5cbiAgICAgKi9cbiAgICBpbml0aWFsaXplQ2xpY2tBY3Rpb25zOiAoKSA9PiB7XG4gICAgICBzdGF0aWtBcGkuc2hhcmluZ0xvZy4kbG9nc1dyYXBwZXIub24oJ2NsaWNrJywgJy5qcy1jb2xsYXBzZS10cmlnZ2VyJywgKGV2ZW50KSA9PiB7XG4gICAgICAgIHN0YXRpa0FwaS5zaGFyaW5nTG9nLnRvZ2dsZUNvbGxhcHNlKCQoZXZlbnQuY3VycmVudFRhcmdldCkuZGF0YSgnY29sbGFwc2UnKSk7XG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVG9nZ2xlIHRhYmxlIGNvbGxhcHNlXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29sbGFwc2VJZFxuICAgICAqL1xuICAgIHRvZ2dsZUNvbGxhcHNlOiAoY29sbGFwc2VJZCkgPT4ge1xuICAgICAgaWYgKGNvbGxhcHNlSWQgPT09IG51bGwpIHtcbiAgICAgICAgY29sbGFwc2VJZCA9IHN0YXRpa0FwaS5zaGFyaW5nTG9nLiRsb2dzV3JhcHBlclxuICAgICAgICAgIC5maW5kKCcubG9ncy10YWJsZSB0Ym9keSB0cjpmaXJzdC1vZi10eXBlJylcbiAgICAgICAgICAuZGF0YSgnY29sbGFwc2UnKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgJGNvbGxhcHNlUm93cyA9ICQoJ1tkYXRhLWNvbGxhcHNlPVwiJyArIGNvbGxhcHNlSWQgKyAnXCJdJyk7XG4gICAgICBjb25zdCAkY29sbGFwc2VDb250ZW50ID0gJGNvbGxhcHNlUm93cy5maW5kKCcuanMtdG9nZ2xlLWNvbGxhcHNlJyk7XG5cbiAgICAgIGlmICgkY29sbGFwc2VSb3dzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICgkY29sbGFwc2VSb3dzLmlzKCcuYWN0aXZlJykpIHtcbiAgICAgICAgJGNvbGxhcHNlQ29udGVudC5zbGlkZVVwKDQwMCwgKCkgPT4gJGNvbGxhcHNlUm93cy5yZW1vdmVDbGFzcygnYWN0aXZlJykpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgICQoJy5hY3RpdmVbZGF0YS1jb2xsYXBzZV0gLmpzLXRvZ2dsZS1jb2xsYXBzZScpLnNsaWRlVXAoKTtcbiAgICAgICQoJ1tkYXRhLWNvbGxhcHNlXScpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcblxuICAgICAgJGNvbGxhcHNlUm93cy5hZGRDbGFzcygnYWN0aXZlJyk7XG4gICAgICAkY29sbGFwc2VDb250ZW50LnNsaWRlRG93bigpO1xuXG4gICAgICBpZiAoJGNvbGxhcHNlUm93cy5wcm9wKCdkYXRhLWxvYWRlZCcpIHx8ICRjb2xsYXBzZVJvd3MuaXMoJzpub3QoLmFjdGl2ZSknKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHN0YXRpa0FwaS5zaGFyaW5nTG9nLmRpc3BsYXlSb3dEYXRhQWpheChcbiAgICAgICAgcGFyc2VJbnQoJGNvbGxhcHNlUm93cy5maW5kKCdbZGF0YS1zb3VyY2Uta2V5PVwic291cmNlX2Jsb2dcIl0nKS50ZXh0KCkpLFxuICAgICAgICBwYXJzZUludCgkY29sbGFwc2VSb3dzLmZpbmQoJ1tkYXRhLXNvdXJjZS1rZXk9XCJzb3VyY2VfcG9zdFwiXScpLnRleHQoKSksXG4gICAgICAgIHBhcnNlSW50KCRjb2xsYXBzZVJvd3MuZmluZCgnW2RhdGEtc291cmNlLWtleT1cImRlc3RfYmxvZ1wiXScpLnRleHQoKSksXG4gICAgICAgIHBhcnNlSW50KCRjb2xsYXBzZVJvd3MuZmluZCgnW2RhdGEtc291cmNlLWtleT1cImRlc3RfcG9zdFwiXScpLnRleHQoKSksXG4gICAgICAgIHBhcnNlSW50KCRjb2xsYXBzZVJvd3MuZmluZCgnW2RhdGEtc291cmNlLWtleT1cInVzZXJfaWRcIl0nKS50ZXh0KCkpXG4gICAgICApLnRoZW4oKHtkYXRhfSkgPT4ge1xuICAgICAgICBPYmplY3Qua2V5cyhkYXRhIHx8IHt9KS5tYXAoKGtleSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAkY29sbGFwc2VDb250ZW50LmZpbmQoJ1tkYXRhLWRlc3Q9XCInICsga2V5ICsgJ1wiXScpLmh0bWwoZGF0YVtrZXldKTtcbiAgICAgICAgICAkY29sbGFwc2VSb3dzLmZpbmQoJ1tkYXRhLXNvdXJjZS1rZXk9XCInICsga2V5ICsgJ1wiXScpLmh0bWwoZGF0YVtrZXkgKyAnX3Nob3J0J10gfHwgZGF0YVtrZXldKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgJGNvbGxhcHNlUm93cy5wcm9wKCdkYXRhLWxvYWRlZCcsIDEpO1xuICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqXG4gICAgICogRGlzcGxheSByb3cgZGV0YWlscyB1c2luZyBBamF4LlxuICAgICAqXG4gICAgICogQHBhcmFtIHNvdXJjZUJsb2dcbiAgICAgKiBAcGFyYW0gc291cmNlUG9zdFxuICAgICAqIEBwYXJhbSBkZXN0QmxvZ1xuICAgICAqIEBwYXJhbSBkZXN0UG9zdFxuICAgICAqIEBwYXJhbSB1c2VyXG4gICAgICogQHJldHVybnMge1Byb21pc2U8dW5rbm93bj59XG4gICAgICovXG4gICAgZGlzcGxheVJvd0RhdGFBamF4OiAoc291cmNlQmxvZywgc291cmNlUG9zdCwgZGVzdEJsb2csIGRlc3RQb3N0LCB1c2VyKSA9PiB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgIHVybDogd2luZG93LmFqYXh1cmwsXG4gICAgICAgICAgbWV0aG9kOiAnZ2V0JyxcbiAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICBhY3Rpb246ICdzaGFyaW5nX2xvZ3NfbGlua3MnLFxuICAgICAgICAgICAgc291cmNlX2Jsb2c6IHNvdXJjZUJsb2csXG4gICAgICAgICAgICBzb3VyY2VfcG9zdDogc291cmNlUG9zdCxcbiAgICAgICAgICAgIGRlc3RfYmxvZzogZGVzdEJsb2csXG4gICAgICAgICAgICBkZXN0X3Bvc3Q6IGRlc3RQb3N0LFxuICAgICAgICAgICAgdXNlcl9pZDogdXNlclxuICAgICAgICAgIH0sXG4gICAgICAgICAgc3VjY2VzczogKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3VjY2VzcyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgcmVqZWN0KHJlc3BvbnNlKTtcblxuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZXJyb3I6IChyZXNwb25zZSkgPT4gcmVqZWN0KHJlc3BvbnNlKVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICBzdGF0aWtBcGkuc2hhcmluZ0xvZy5pbml0aWFsaXplQ2xpY2tBY3Rpb25zKCk7XG4gIHN0YXRpa0FwaS5zaGFyaW5nTG9nLnRvZ2dsZUNvbGxhcHNlKG51bGwpO1xufSkoalF1ZXJ5KTsiXX0=
