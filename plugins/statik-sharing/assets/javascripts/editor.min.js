"use strict";function ownKeys(e,t){var a,r=Object.keys(e);return Object.getOwnPropertySymbols&&(a=Object.getOwnPropertySymbols(e),t&&(a=a.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,a)),r}function _objectSpread(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?ownKeys(Object(a),!0).forEach(function(t){_defineProperty(e,t,a[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):ownKeys(Object(a)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))})}return e}function _defineProperty(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function asyncGeneratorStep(t,e,a,r,i,n,s){try{var o=t[n](s),l=o.value}catch(t){return void a(t)}o.done?e(l):Promise.resolve(l).then(r,i)}function _asyncToGenerator(o){return function(){var t=this,s=arguments;return new Promise(function(e,a){var r=o.apply(t,s);function i(t){asyncGeneratorStep(r,e,a,i,n,"next",t)}function n(t){asyncGeneratorStep(r,e,a,i,n,"throw",t)}i(void 0)})}}!function(c){var t;!1!==window.hasOwnProperty("statik_sharing_config")&&(window.statikApi=window.statikApi||{},statikApi.sharing={config:window.statik_sharing_config,debug:parseInt(window.statik_sharing_config.debug),$metaBoxWrapper:c(document).find("#statik_sharing_table_grid"),ajaxInProgress:0,errorModals:0,rebuildMetaBoxTimeout:null,initializeSharingActions:function(){window.hasOwnProperty("wp")&&window.hasOwnProperty("_wpLoadBlockEditor")&&window._wpLoadBlockEditor.then(function(){var a=!1,r=!1;wp.data.subscribe(function(){var t=wp.data.select("core/editor"),e=wp.data.select("core/edit-post");(a=!a&&!t.isAutosavingPost()&&t.isSavingPost()&&t.didPostSaveRequestSucceed()?!0:a)&&e.isSavingMetaBoxes()&&(r=!0),a&&r&&!e.isSavingMetaBoxes()&&(statikApi.sharing.rebuildMetaBox(0).then(function(){return statikApi.sharing.shareWaitingPosts()}),a=r=!1)})})},initializeClickActions:function(){statikApi.sharing.$metaBoxWrapper.on("change",".js-bulk-check",function(t){statikApi.sharing.$metaBoxWrapper.find('input[name="statik_share_blogs[]"]:not([disabled])').prop("checked",t.currentTarget.checked)}),statikApi.sharing.$metaBoxWrapper.on("click",".single-blog .js-action-button:not(.disabled):not(.temp-disabled)",function(){var e=_asyncToGenerator(regeneratorRuntime.mark(function t(e){var a,r,i;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return e.preventDefault(),clearTimeout(statikApi.sharing.rebuildMetaBoxTimeout),(a=statikApi.sharing.$metaBoxWrapper.find(".js-action-button:not(.disabled)")).addClass("temp-disabled"),r=c(e.currentTarget),i=r.closest(".single-blog"),"conflict"===r.data("warning")&&statikApi.sharing.errorModals--,t.next=9,statikApi.sharing[r.data("action")+"Blog"](i.data("blog"),i.data("post"),i).catch(function(t){return statikApi.sharing.debug&&console.error(t)});case 9:a.removeClass("temp-disabled"),statikApi.sharing.toggleBeforeUnload(!1);case 11:case"end":return t.stop()}},t)}));return function(t){return e.apply(this,arguments)}}()),statikApi.sharing.$metaBoxWrapper.on("click",".js-bulk-action-apply",function(){var e=_asyncToGenerator(regeneratorRuntime.mark(function t(e){var a,r,i,n,s,o,l;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(e.preventDefault(),l=c(e.currentTarget),a=l.closest(".bulk-actions").find("select").val(),l.hasClass("disabled")||l.hasClass("temp-disabled")||"function"!=typeof statikApi.sharing[a+"Blog"])return t.abrupt("return");t.next=5;break;case 5:if(r=statikApi.sharing.$metaBoxWrapper.find(".js-action-button:not(.disabled)"),i=statikApi.sharing.$metaBoxWrapper.find('input[name="statik_share_blogs[]"]:checked'),"function"!=typeof statikApi.sharing[a+"Blog"])return t.abrupt("return");t.next=9;break;case 9:clearTimeout(statikApi.sharing.rebuildMetaBoxTimeout),r.addClass("temp-disabled"),i.closest(".single-blog").addClass("in-progress"),n=0;case 13:if(n<i.length)return s=c(i[n]).closest(".single-blog"),o=s.data("blog"),l=s.data("post"),t.next=19,statikApi.sharing[a+"Blog"](o,l,s,!1).catch(function(t){return statikApi.sharing.debug&&console.error(t)});t.next=22;break;case 19:n++,t.next=13;break;case 22:if(r.removeClass("temp-disabled"),t.t0=i.length,t.t0)return t.next=27,statikApi.sharing.rebuildMetaBox();t.next=27;break;case 27:statikApi.sharing.toggleBeforeUnload(!1);case 28:case"end":return t.stop()}},t)}));return function(t){return e.apply(this,arguments)}}()),statikApi.sharing.$metaBoxWrapper.on("click",".js-close-error",function(t){t=c(t.currentTarget).closest(".single-blog");t.removeClass("is-error"),t.find(".buttons").hide(),t.removeData("post"),0==statikApi.sharing.errorModals--&&statikApi.sharing.rebuildMetaBox(0)})},shareWaitingPosts:(t=_asyncToGenerator(regeneratorRuntime.mark(function t(){var e,a,r,i;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(0===(e=statikApi.sharing.$metaBoxWrapper.find('.single-blog[data-status="statik_ajax_in_progress"]')).length)return t.abrupt("return");t.next=3;break;case 3:clearTimeout(statikApi.sharing.rebuildMetaBoxTimeout),e.addClass("in-progress"),a=!1,r=0;case 7:if(r<e.length)return i=c(e[r]).closest(".single-blog"),t.next=11,statikApi.sharing.shareBlog(i.data("blog"),i.data("post"),i,!1).catch(function(){return a=!0});t.next=14;break;case 11:r++,t.next=7;break;case 14:if(t.t0=!a&&e.length,t.t0)return t.next=18,statikApi.sharing.rebuildMetaBox();t.next=18;break;case 18:statikApi.sharing.toggleBeforeUnload(!1);case 19:case"end":return t.stop()}},t)})),function(){return t.apply(this,arguments)}),rebuildMetaBox:function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:1500;return new Promise(function(e,a){statikApi.sharing.rebuildMetaBoxTimeout=setTimeout(function(){statikApi.sharing.ajaxInProgress||statikApi.sharing.errorModals||c.ajax({url:ajaxurl,method:"post",data:{action:"rebuild_meta_box",post_id:c("input#post_ID").attr("value"),nonce:statikApi.sharing.$metaBoxWrapper.data("nonce")},success:function(t){statikApi.sharing.ajaxInProgress||statikApi.sharing.errorModals||(statikApi.sharing.$metaBoxWrapper.parent().html(t.success?t.data:"<p>"+t.data+"</p>"),statikApi.sharing.$metaBoxWrapper=c(document).find("#statik_sharing_table_grid"),statikApi.sharing.initializeClickActions(),e(t))},error:function(t){return a(t)}})},t)})},shareBlog:function(t,e,o){var a=!(3<arguments.length&&void 0!==arguments[3])||arguments[3];return o.addClass("in-progress"),statikApi.sharing.initializeAjaxApiRequest({action:"statik_sharing",sharing_action:"share",blog_id:parseInt(t),post_id:parseInt(e),current_post_id:parseInt(c("input#post_ID").attr("value"))},a).then(function(){o.removeClass("in-progress"),o.addClass("is-success")}).catch(function(t){var e,a,r,i,n,s;o.removeClass("in-progress"),statikApi.sharing.showRowErrorModal(o,t,!1),0!==(null==t||null===(e=t.data)||void 0===e||null===(a=e.error)||void 0===a?void 0:a.code)&&(419===(null==t||null===(r=t.data)||void 0===r||null===(i=r.error)||void 0===i?void 0:i.code)?o.find(".error-wrapper .buttons").show():o.find(".error-wrapper .buttons").hide(),o.data("post",null!==(s=JSON.parse(null==t||null===(n=t.data)||void 0===n||null===(s=n.error)||void 0===s?void 0:s.message).conflict_id)&&void 0!==s?s:""))})},deleteBlog:function(t,e,a){var r=!(3<arguments.length&&void 0!==arguments[3])||arguments[3];return a.addClass("in-progress"),statikApi.sharing.initializeAjaxApiRequest({action:"statik_sharing",sharing_action:"delete",blog_id:parseInt(t),post_id:parseInt(e),current_post_id:parseInt(c("input#post_ID").attr("value"))},r).then(function(){a.removeClass("in-progress"),a.addClass("is-success")}).catch(function(t){a.removeClass("in-progress"),statikApi.sharing.showRowErrorModal(a,t)})},detachBlog:function(t,e,a){var r=!(3<arguments.length&&void 0!==arguments[3])||arguments[3];return a.addClass("in-progress"),statikApi.sharing.initializeAjaxApiRequest({action:"statik_sharing",sharing_action:"detach",blog_id:parseInt(t),post_id:parseInt(e),current_post_id:parseInt(c("input#post_ID").attr("value"))},r).then(function(){a.removeClass("in-progress"),a.addClass("is-success")}).catch(function(t){a.removeClass("in-progress"),statikApi.sharing.showRowErrorModal(a,t)})},initializeAjaxApiRequest:function(){var t=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{},s=!(1<arguments.length&&void 0!==arguments[1])||arguments[1];return statikApi.sharing.ajaxInProgress++,new Promise(function(i,n){c.ajax({url:ajaxurl,method:"post",data:_objectSpread(_objectSpread({},t),{nonce:statikApi.sharing.$metaBoxWrapper.data("nonce")}),success:function(t){var e=t.success,a=t.data,r=a.edit_link,a=a.blog_id;statikApi.sharing.ajaxInProgress--,e?r?statikApi.sharing.createFrameWithEdit(r,a).then(function(){s&&statikApi.sharing.rebuildMetaBox(),i(t)}).catch(function(){return n(t)}):(s&&statikApi.sharing.rebuildMetaBox(),i(t)):n(t)},error:function(t){statikApi.sharing.ajaxInProgress--,n(t)}})})},createFrameWithEdit:function(t,e){var r=statikApi.sharing.$metaBoxWrapper.find('.single-blog[data-blog="'+e+'"]');return r.append(c("<iframe>").attr({id:"iframe-blog-"+e,name:"iframe-blog-"+e,src:t,sandbox:"allow-top-navigation allow-scripts allow-modals allow-same-origin"})),new Promise(function(e){var a=setInterval(function(){var t=r.find("iframe");t.hasClass("blog-ready")&&(t.remove(),clearInterval(a),e())},100)})},showRowErrorModal:function(t,e){var a,r,i;t.addClass("is-error"),statikApi.sharing.errorModals++;var n=null;try{var s,o,n=JSON.parse(null==e||null===(s=e.data)||void 0===s||null===(o=s.error)||void 0===o?void 0:o.message)}catch(t){}t.find(".error-wrapper .message").html((null===n||void 0===n?void 0:n.message)||(null==e||null===(a=e.data)||void 0===a||null===(r=a.error)||void 0===r?void 0:r.message)||(null==e||null===(i=e.data)||void 0===i?void 0:i.message)||(null==e?void 0:e.responseText)||e)},showReplicaModal:function(){var t=statikApi.sharing.config,e=t.isReplica,a=t.replica,r=t.replicaCloseWarning;return 0!==parseInt(e)&&(c(document).find("body").addClass("statik_sharing_lock_editor").append(a),c(document).on("click",".js-close-replica-modal",function(){confirm(r)&&(c("#statik_sharing_modal_wrapper").remove(),c(document).find("body").removeClass("statik_sharing_lock_editor"))}),!0)},toggleBeforeUnload:function(){window.addEventListener("beforeunload",function(t){(statikApi.sharing.ajaxInProgress||statikApi.sharing.errorModals)&&(t.preventDefault(),t.returnValue="Statik Sharing is still in progress!")})},saveReplicaPost:function(){-1!==window.location.search.indexOf("statik=update-sharing-replica")&&(statikApi.hasOwnProperty("gutenberg")&&window.hasOwnProperty("wp")&&window.hasOwnProperty("_wpLoadBlockEditor")?window._wpLoadBlockEditor.then(function(){var e=!1;wp.data.subscribe(function(){e||0===wp.data.select("core/block-editor").getBlocks().length?c(parent.document.getElementById(window.name)).addClass("blog-ready"):(e=!0,statikApi.gutenberg.saveGutenbergBlocksCallback(!0).then(function(){return c(parent.document.getElementById(window.name)).addClass("blog-ready")}).catch(function(t){(e=t.hasOwnProperty("status")&&409===t.status)&&c(parent.document.getElementById(window.name)).addClass("blog-ready"),statikApi.sharing.debug&&console.error(t)}))})}):c(parent.document.getElementById(window.name)).addClass("blog-ready"))}},statikApi.sharing.saveReplicaPost(),!1===statikApi.sharing.showReplicaModal()&&(statikApi.sharing.toggleBeforeUnload(),statikApi.sharing.initializeClickActions(),statikApi.sharing.shareWaitingPosts(),statikApi.sharing.initializeSharingActions()))}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
